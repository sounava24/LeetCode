/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode *nptr,*head;
    nptr=(struct ListNode*)malloc(sizeof(struct ListNode));
    nptr->next=NULL;
    head=nptr;
     if(list1==NULL && list2==NULL)
    return NULL;
    if(list1==NULL && list2!=NULL)
    return list2;
    if(list1!=NULL && list2==NULL)
    return list1;

    int min=0;
    if(list1->val<list2->val){min=list1->val; list1=list1->next;}
    else {min=list2->val; list2=list2->next;}
    nptr->val=min;
    while(list1!=NULL && list2!=NULL){
        struct ListNode *ptr=(struct ListNode*)malloc(sizeof(struct ListNode));
        if(list2->val<=list1->val){
          ptr->val=list2->val;
          nptr->next=ptr;
          list2=list2->next;
        }
        else{
          ptr->val=list1->val;
          nptr->next=ptr;
          list1=list1->next;
        }
        ptr->next=NULL;
        nptr=nptr->next;
    }
    while(list1!=NULL){
        struct ListNode *ptr=(struct ListNode*)malloc(sizeof(struct ListNode));
          ptr->val=list1->val;
          ptr->next=NULL;
          nptr->next=ptr;
          nptr=nptr->next;
          list1=list1->next;
    }
    while(list2!=NULL){
        struct ListNode *ptr=(struct ListNode*)malloc(sizeof(struct ListNode));
          ptr->val=list2->val;
          ptr->next=NULL;
          nptr->next=ptr;
          nptr=nptr->next;
          list2=list2->next;
    }
    return head;
}
